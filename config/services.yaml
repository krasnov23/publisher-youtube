# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploadDir: '%kernel.project_dir%/public/upload'
    exceptions:
        # hidden - есть ли какая-то секретная информация в исключении, # loggable свойство определяет стоит ли логировать это исключение
        # loggable - обычно требуется только когда ответ 500, по умолчанию он false поэтому убираем
        # В СЛУЧАЕ С BookCategoryNotFoundException логировать ничего не нужно
        # Исключение ниже указываем для того чтобы нам выдавало массив {"message" : "not found"} в случае
        # поиска не существующей страницы
        Symfony\Component\HttpKernel\Exception\NotFoundHttpException: { code: 404 }
        App\Exceptions\BookCategoryNotFoundException: { code: 404,hidden: false}
        App\Exceptions\SubscriberAlreadyExistsException: { code: 409,hidden: false }
        App\Exceptions\RequestBodyConvertException: { code: 400,hidden: false }
        App\Exceptions\BookNotFoundException.php: { code: 404,hidden: false }
        App\Exceptions\CategoryNotFoundException.php: { code: 404,hidden: false }
        App\Exceptions\UserAlreadyExistsException: { code: 409,hidden: false }
        App\Exceptions\UserNotFoundException.php: { code: 404,hidden: false }
        App\Exceptions\BookAlreadyExistsException.php: { code: 409,hidden: false }
        App\Exceptions\UploadFileInvalidTypeException.php: { code: 404,hidden: false }
        App\Exceptions\BookCategoryNotEmptyException: { code: 400, hidden: false }
        App\Exceptions\BookCategoryAlreadyExistsException: { code: 409, hidden: false }


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            # isDebug - параметр проводка, если мы укажем в нашем конструкторе переменную isDebug, к примеру наш сервис
            # захочет получить переменную isDebug, мы можем указать тип переменной и он сам ее отсюда вставит.
            # Данная переменная может понадобиться очень многим сервисам, если кто-то захочет менять свое поведение
            # в зависимости от дебага ему понадобиться эта переменная.
            bool $isDebug: '%kernel.debug%'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\ExceptionHandler\ExceptionMappingResolver:
        arguments: ['%exceptions%']



    App\Listener\ApiExceptionListener:
        # Приоритет 10, для того чтобы наш листенере срабатывал раньше чем все остальное
        tags:
            - {name: kernel.event_listener, event: kernel.exception, priority: 10}


    App\Listener\ValidationExceptionListener:
        # Ставим priority 15 так как он должен срабатывать до ApiExceptionListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 15 }

    App\Listener\JwtCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexic_jwt_authentication.on_jwt_created }


    App\Service\UploadService:
        arguments: ['@filesystem','%uploadDir%']



