security:

    role_hierarchy:
        ROLE_EDITOR: ROLE_USER
        ROLE_ADMIN: ROLE_EDITOR

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    # все что имплементирует PasswordAuthenticatedUserInterface будет использоваться АвтоАлгоритм шифрования паролей
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    # Строчка providers по входящему емейлу, т.е входящему идентификатору находит сущность User
    providers:
        users:
            #id: App\Security\JwtUserProvider
            entity:
                class: App\Entity\UserApi
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    # Фаерволы это некие правила которые регламентирует правила доступа к чему-либо,
    # фаервол под названием dev отключает security к profiler, wdt и другой статике грубо говоря вы когда открываете
    # когда мы открываем профайлер итд для этого security по умолчанию не требуются
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            # нам не нужно никакого состояние например сессий, т.к jwt токены не требуют никакого состояния
            stateless: true
            # entry_point - у нас есть два аутентификатора jwt и refresh_jwt, то есть мы можем аутентифицировать пользователя
            # двумя методами entry_point есть у каждого из этих двух аутентификаторов и он отвечает на то что делать, если у
            # нас человек который не авторизован пытается запросить к примеру /api/v1/user . Поскольку у нас два аутентификатора
            # симфони не может выбрать кому делегировать обработку данной ситуации jwt или refresh_jwt. Каждый из обоих аутентификтаоров
            # имеет выброс исключения который срабатывает если неавторизованный пользователь заходит на защищенный роут.
            # В данном случае мы просто выбираем какой из двух аутентификаторов будет отвечать на тот момент когда незарегестированный
            # пользователь приходит на защищенный роут.
            entry_point: jwt
            json_login:
                # переменная api_login_check определенна в routes.yaml
                check_path: api_login_check # or api_login_check as defined in config/routes.yaml
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            # используется jwt без настроек
            jwt : ~
            refresh_jwt:
                check_path: api_refresh_token
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # роут api/v1/user - требует доступ полной аутентификации, к остальным у нас аутентификации не будет, потому что
        # любой пользователь может дернуть api, а user уже выдает персонализированную информацию и там уже аутентификация необходима
        - { path: ^/api/v1/user, roles: ROLE_USER }
        - { path: ^/api,       roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
