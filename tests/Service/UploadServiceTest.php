<?php

namespace App\Tests\Service;

use App\Exceptions\UploadFileInvalidTypeException;
use App\Service\UploadService;
use App\Tests\AbstractTestCase;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Uid\Uuid;

class UploadServiceTest extends AbstractTestCase
{
    private const UPLOAD_DIR = '\tmp';

    private Filesystem $fileSystem;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->fileSystem = $this->createMock(Filesystem::class);
    }


    public function testDeleteBookFile(): void
    {
        $this->fileSystem->expects($this->once())
            ->method('remove')
            ->with('\tmp\book\1\test.jpg');

        (new UploadService($this->fileSystem,self::UPLOAD_DIR))->deleteBookFile(1,'test.jpg');
    }

    public function testUploadBookFileExtension(): void
    {
        $this->expectException(UploadFileInvalidTypeException::class);

        $file = $this->createMock(UploadedFile::class);

        $file->expects($this->once())
            ->method('guessExtension')
            ->willReturn(null);

        (new UploadService($this->fileSystem,self::UPLOAD_DIR))->uploadBookFile(1,$file);

    }

    public function testUploadBookFile(): void
    {
        // Создание мокировки отличается тем что мокированному объекту мы можем задать поведение которое указанно
        // в двух методах ниже, обычному объекту такое поведение мы задать не можем
        $file = $this->createMock(UploadedFile::class);

        $file->expects($this->once())
            ->method('guessExtension')
            ->willReturn('jpg');

        $file->expects($this->once())
            ->method('move')
            ->with($this->equalTo('\tmp\book\1'), $this->callback(function (string $arg){
                if (!str_ends_with($arg,'.jpg')){
                    return false;
                }

                return Uuid::isValid(basename($arg,'.jpg'));
            }));

        // https://www.php.net/manual/ru/function.pathinfo.php
        $actualPath = pathinfo((new UploadService($this->fileSystem,self::UPLOAD_DIR))->uploadBookFile(1,$file));


        $this->assertEquals('/upload/book/1',$actualPath['dirname']);
        $this->assertEquals('jpg',$actualPath['extension']);
        $this->assertTrue(Uuid::isValid($actualPath['filename']));
    }



}