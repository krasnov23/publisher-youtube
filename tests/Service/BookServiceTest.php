<?php

namespace App\Tests\Service;

use App\Entity\Book;
use App\Entity\BookCategory;
use App\Entity\BookFormat;
use App\Entity\BookToBookFormat;
use App\Exceptions\BookCategoryNotFoundException;
use App\Models\BookCategoryModel;
use App\Models\BookDetails;
use App\Models\BookFormatModel;
use App\Models\BookListItem;
use App\Models\BookListResponse;
use App\Repository\BookCategoryRepository;
use App\Repository\BookRepository;
use App\Repository\ReviewRepository;
use App\Service\BookService;
use App\Service\Rating;
use App\Service\RatingService;
use App\Tests\AbstractTestCase;
use Doctrine\Common\Collections\ArrayCollection;

class BookServiceTest extends AbstractTestCase
{

    private BookRepository $bookRepository;

    private BookCategoryRepository $bookCategoryRepository;

    private RatingService $ratingService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->bookRepository = $this->createMock(BookRepository::class);
        $this->bookCategoryRepository = $this->createMock(BookCategoryRepository::class);
        $this->ratingService = $this->createMock(RatingService::class);

    }

    public function testGetBooksByCategoryNotFound(): void
    {
        // Тест на то что при методе фаинд с айди 130 не будет найдена данная категория книг
        // Ожидает что при выбросе айди = 130, mock выбросит исключение
        $this->bookCategoryRepository->expects($this->once())
            ->method('existsById')
            ->with(130)
            ->willReturn(false);
            //->willThrowException(new BookCategoryNotFoundException());

        $this->expectException(BookCategoryNotFoundException::class);

        (new BookService($this->bookRepository, $this->bookCategoryRepository,
            $this->ratingService))->getBookByCategory(130);
    }

    public function testGetBookById(): void
    {
        $this->bookRepository->expects($this->once())
            ->method('getPublishedById')->with(1)
            ->willReturn($this->createBookEntity());

        $this->ratingService->expects($this->once())
            ->method('calcReviewRatingForBook')
            ->with(1)
            ->willReturn(new Rating(10,5.5));

        $format = (new BookFormatModel())
            ->setId(1)
            ->setTitle('format')
            ->setDescription('description format')
            ->setComment(null)
            ->setPrice(123.55)
            ->setDiscountPercent(5);

        $expected = (new BookDetails())
            ->setId(1)
            ->setRating(5.5)
            ->setReviews(10)
            ->setSlug('test-book')
            ->setTitle('Test Book')
            ->setImage('http://localhost.png')
            ->setAuthors(['Tester'])
            ->setCategories([
                new BookCategoryModel(1,'Devices','devices')
            ])
            ->setPublicationData(1602288000)
            ->setFormats([$format]);

        $this->assertEquals($expected,(new BookService($this->bookRepository, $this->bookCategoryRepository,
            $this->ratingService))->getBookById(1));


    }

    public function testGetBooksByCategory(): void
    {
        // Эмулирует метод файндбайкатегори с айди равным 130, и ожидает что он вернет нам результат метода createBookEntity
        // Эмулирует метод который находится в BookRepository, мы хотим вернуть класс Book, но поскольку это занимает у нас несколько
        // строчек мы создали для этого отдельный метод (createBookEntity)
        $this->bookRepository->expects($this->once())
            // Ожидает что будет вызван метод который находится в bookrepository
            ->method('findPublishedBooksByCategoryId')
            // c айди категорией 130
            ->with(130)
            // и вернет массив из книг (в данном случае одной книги которая будет подходить под категорию 130)
            ->willReturn([$this->createBookEntity()]);

        $this->bookCategoryRepository->expects($this->once())
            // Ищет категорию с айди 130
            ->method('existsById')
            ->with(130)
            // Возвращает BookCategory - в данном случае пустой так как нам не важно что-то кроме айди конкретной категории
            ->willReturn(true);

        // Отправляет наши значения в BookService и должен дать нам на выходе то что будет указанно в expected
        $service = new BookService($this->bookRepository, $this->bookCategoryRepository,
            $this->ratingService);

        // Для проверки конечного результата создаем метод который будет указан ниже
        $expected = new BookListResponse([$this->createBookItemModel()]);

        $this->assertEquals($expected, $service->getBookByCategory(130));
    }

    private function createBookEntity(): Book
    {
        $category = MockUtils::createBookCategory();
        $this->setEntityId($category,1);

        $formats = MockUtils::createBookFormat();
        $this->setEntityId($formats, 1);

        $book = MockUtils::createBook()
            ->setCategories(new ArrayCollection([$category]));
        $this->setEntityId($book, 1);

        $join = MockUtils::createBookFormatLink($book,$formats);
        $this->setEntityId($join,1);

        $book->setFormats(new ArrayCollection([$join]));

        return $book;
    }

    private function createBookItemModel(): BookListItem
    {
        // BookListItem не имеет сеткатегорис так как это уже переписанная сущность подобранная под определенную категорию
        return (new BookListItem())
            ->setId(1)
            ->setTitle('Test Book')
            ->setSlug('test-book')
            ->setAuthors(['Tester'])
            ->setImage('http://localhost.png')
            ->setPublicationData(1602288000
            );
    }
}
