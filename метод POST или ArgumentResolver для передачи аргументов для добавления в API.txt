Создание Сервиса сущности и аргумента к запросу. (Видео 8)
1. Создали сущность Subscriber и репозиторий.
2. Создали метод для репозитория который ищет нужную нам сущность по передаваемому email и возвращает true или false
3. Создали модель SubscriberRequest которая будет далее передана в наш контроллер
4. Создали сервис SubscriberService и модель исключения (исключение будет внутри сервиса, не забываем добавить его в
services.yaml).
5. Сделали контроллер SubscribeController в который поместили Сервис.

Аргумент револьвер или метод пост (Написание собственного атрибута RequestBody)
1. Установка валидатора composer require symfony/validator
2. Помечаем свойства нашей модели ( SubscriberRequest) свойство email - что оно не пустое, а свойство agreed что оно по умолчанию true
3. Создаем наш собственный атрибут (который указан в нашем контроллере, RequestBody)
4. Аннотируем его как атрибут с помощью #Attribute, нам необходимо чтобы он применялся только к параметрам метода поэтому указываем Attribute::TargetParameter
5. Создаем Резольвер RequestBodyArgumentResolver который наследует интерфейс
ArgumentValueResolverInterface (метод resolve), который будет проводить работу и возвращать нам десерилизованную и
и отвалидированную модель класса SubscriberRequest (которая содержит email и agreed(соглашение на рассылку)).


Если человек действительно попадает в это исключение когда он не проходит валидацию
наш дефолтный обработчик, который мы писали в (урок 7 ютуб или исключения.txt) выдаст нам internal error
и распишет trace и врятли мы сможем понять что случилось, поэтому нам необходимо написать еще один обработчик
чтобы понять что случилось, где произошла ошибка итд. (файл RequestBodyArgumentResolver)
Для того чтобы нам полноценно понять что случилось при ошибке валидации пишем еще один обработчик.
1. Создали ValidationExceptionListener (папка Listener), который будет более подробно нам указывать наши ошибки если
они возникнут
2. Проверяем с помощью команды curl -XPOST "http://localhost:8000/api/v1/subscribe" --data '{"email":"test","agreed":true}' | jq
